import Testing
import HealthKit
import Foundation
@testable import HealthKitDataGenerator

final class HealthKitDataGeneratorTests {
    
    // MARK: - Data Export Tests
    
    @Test("Data Export - JSON Export Target")
    func testDataExportJsonTarget() throws {
        let tempDir = FileManager.default.temporaryDirectory
        let outputFile = tempDir.appendingPathComponent("test_export.json")
        
        // Create JSON export target
        let target = JsonSingleDocAsFileExportTarget(
            outputFileName: outputFile.path,
            overwriteIfExist: true
        )
        
        // Verify target properties
        #expect(target.outputFileName == outputFile.path)
        #expect(target.overwriteIfExist == true)
    }
    
    @Test("Data Export - Export Configuration Types")
    func testDataExportConfigurationTypes() {
        let startDate = Date().addingTimeInterval(-86400)
        let endDate = Date()
        
        // Test different export types
        let allConfig = HealthDataFullExportConfiguration(
            profileName: "All", 
            exportType: .ALL,
            startDate: startDate,
            endDate: endDate,
            shouldAuthorize: false
        )
        let addedByAppConfig = HealthDataFullExportConfiguration(
            profileName: "Added by App", 
            exportType: .ADDED_BY_THIS_APP,
            startDate: startDate,
            endDate: endDate,
            shouldAuthorize: false
        )
        let generatedConfig = HealthDataFullExportConfiguration(
            profileName: "Generated by App", 
            exportType: .GENERATED_BY_THIS_APP,
            startDate: startDate,
            endDate: endDate,
            shouldAuthorize: false
        )
        
        #expect(allConfig.exportType == .ALL)
        #expect(addedByAppConfig.exportType == .ADDED_BY_THIS_APP)
        #expect(generatedConfig.exportType == .GENERATED_BY_THIS_APP)
    }
    
    // MARK: - Data Import Tests
    
    @Test("Data Import - HealthKit Profile Creation")
    func testHealthKitProfileCreation() throws {
        // Create a sample profile data
        let profileData: [String: Any] = [
            "metaData": [
                "creationDate": Date().timeIntervalSince1970,
                "profileName": "TestProfile",
                "version": "1.0.0"
            ],
            "userData": [
                "bloodType": 1,
                "biologicalSex": 2
            ],
            "HKQuantityTypeIdentifierStepCount": [
                [
                    "unit": "count",
                    "sdate": Date().timeIntervalSince1970 * 1000,
                    "value": 1000
                ]
            ]
        ]
        
        // Create temporary file
        let tempDir = FileManager.default.temporaryDirectory
        let tempFile = tempDir.appendingPathComponent("test_profile.json")
        
        // Write test data to file
        let jsonData = try JSONSerialization.data(withJSONObject: profileData, options: .prettyPrinted)
        try jsonData.write(to: tempFile)
        
        // Create HealthKit profile from file
        let healthStore = HKHealthStore()
        let profile = try HealthKitProfile(healthStore: healthStore, fileAtPath: tempFile)
        
        // Verify profile properties
        let metaData = profile.loadMetaData()
        #expect(metaData.profileName == "TestProfile")
        #expect(metaData.version == "1.0.0")
        
        // Clean up
        try? FileManager.default.removeItem(at: tempFile)
    }
    
    @Test("Data Import - Profile Reader")
    func testHealthKitProfileReader() throws {
        let tempDir = FileManager.default.temporaryDirectory
        
        // Create test profile files
        let profile1Data: [String: Any] = [
            "metaData": [
                "creationDate": Date().timeIntervalSince1970,
                "profileName": "Profile1",
                "version": "1.0.0"
            ]
        ]
        
        let profile2Data: [String: Any] = [
            "metaData": [
                "creationDate": Date().timeIntervalSince1970,
                "profileName": "Profile2",
                "version": "1.0.0"
            ]
        ]
        
        let file1 = tempDir.appendingPathComponent("profile1.json")
        let file2 = tempDir.appendingPathComponent("profile2.json")
        
        try JSONSerialization.data(withJSONObject: profile1Data).write(to: file1)
        try JSONSerialization.data(withJSONObject: profile2Data).write(to: file2)
        
        // Read profiles from directory
        let healthStore = HKHealthStore()
        let profiles = try HealthKitProfileReader.readProfilesFromDisk(healthStore, tempDir)
        
        // Verify profiles were read
        #expect(profiles.count >= 2)
        
        // Clean up
        try? FileManager.default.removeItem(at: file1)
        try? FileManager.default.removeItem(at: file2)
    }
    
    // MARK: - Sample Generation Tests
    
    @Test("Sample Generation - Basic Configuration")
    func testSampleGenerationConfig() {
        let profile = HealthProfile.balanced
        let dateRange = DateRange.lastDays(7)
        
        let config = SampleGenerationConfig(
            profile: profile,
            dateRange: dateRange,
            randomSeed: 42
        )
        
        #expect(config.profile.name == "Balanced Lifestyle")
        #expect(config.randomSeed == 42)
        #expect(config.dateRange.numberOfDays >= 7)
    }
    
    @Test("Sample Generation - Date Range Creation")
    func testDateRangeCreation() {
        let lastWeek = DateRange.lastDays(7)
        let lastMonth = DateRange.lastDays(30)
        
        #expect(lastWeek.numberOfDays >= 7)
        #expect(lastMonth.numberOfDays >= 30)
        
        // Test single day range
        let today = Date()
        let singleDay = DateRange.singleDay(today)
        
        #expect(singleDay.numberOfDays == 1)
    }
    
    @Test("Sample Generation - Health Profile Presets")
    func testHealthProfilePresets() {
        let sporty = HealthProfile.sporty
        let balanced = HealthProfile.balanced
        let stressed = HealthProfile.stressed
        
        #expect(sporty.name == "Athletic")
        #expect(balanced.name == "Balanced Lifestyle")
        #expect(stressed.name == "Stressed Professional")
        
        // Verify profile properties
        #expect(sporty.workoutFrequency == .active)
        #expect(balanced.workoutFrequency == .moderate)
        #expect(stressed.stressLevel == .veryHigh)
    }
    
    // MARK: - JSON Handling Tests
    
    @Test("JSON Handling - Export Configuration Serialization")
    func testExportConfigurationSerialization() throws {
        let config = HealthDataFullExportConfiguration(
            profileName: "Test Export",
            exportType: .ALL,
            startDate: Date().addingTimeInterval(-86400),
            endDate: Date(),
            shouldAuthorize: false
        )
        
        // Test basic properties
        #expect(config.profileName == "Test Export")
        #expect(config.exportType == .ALL)
        #expect(config.exportUuids == false)
        #expect(config.shouldAuthorize == false)
    }
    
    @Test("JSON Handling - Sample Generation Config Serialization")
    func testSampleGenerationConfigSerialization() throws {
        let config = SampleGenerationConfig(
            profile: .balanced,
            dateRange: .lastDays(7),
            randomSeed: 42
        )
        
        // Test JSON serialization
        let jsonString = try config.toJSON()
        #expect(!jsonString.isEmpty)
        #expect(jsonString.contains("42"))
    }
    
    // MARK: - Error Handling Tests
    
    @Test("Error Handling - Missing File Import")
    func testMissingFileImport() throws {
        let nonExistentPath = "/path/that/does/not/exist.json"
        
        do {
            let healthStore = HKHealthStore()
            let nonExistentURL = URL(fileURLWithPath: nonExistentPath)
            let _ = try HealthKitProfile(healthStore: healthStore, fileAtPath: nonExistentURL)
            #expect(Bool(false), "Should have thrown an error for missing file")
        } catch {
            // Expected to throw an error
            #expect(true)
        }
    }
    
}
